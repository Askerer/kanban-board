PRD â€“ Trello-style Kanban Board MVP (Next.js)
ðŸ“Œ Project Name
Trello MVP Clone â€“ Kanban Board Web App
ðŸ§­ Goal
Build a minimal yet functional Trello-like Kanban app using Next.js that allows users to create boards, columns (lists), and cards, and rearrange them using drag-and-drop. Backend is powered by Prisma + SQLite.
ðŸ”‘ Core Features (MVP Scope)
âœ… View all boards
âœ… Create a new board (title only)
âœ… Navigate to individual board page
âœ… Display columns (lists) horizontally
âœ… Add a new column
âœ… Reorder columns (optional)
âœ… Display cards vertically in columns
âœ… Add new card to a column
âœ… Drag-and-drop to reorder cards in a column
âœ… Drag-and-drop to move cards across columns
âœ… Persist all data (boards, columns, cards) in SQLite via Prisma
âœ… Save order of columns and cards
ðŸ§± Tech Stack
Frontend: Next.js 14 (App Router or Pages Router)
UI Components: Tailwind CSS + shadcn/ui (optional)
Drag & Drop: @dnd-kit/core, @dnd-kit/sortable
State: React state or Zustand
Backend: Next.js API routes
Database: Prisma + SQLite
Hosting: Vercel (optional)
ðŸ§© Entity Model
Board: id, title, columns[]
Column: id, title, boardId, order, cards[]
Card: id, content, columnId, order
ðŸ§© UI Wireframes (Textual)
/ â€“ Board List
â€¢ Display list of boards
â€¢ Button: + New Board
/board/[id] â€“ Board View
â€¢ Horizontally scrollable columns
â€¢ Column title
â€¢ Button: + Add Card
â€¢ List of draggable cards
â€¢ Button: + Add Column
ðŸ”Œ API Endpoints (CRUD)
GET /api/boards - Get all boards
POST /api/boards - Create new board
GET /api/boards/:id - Get full board details
POST /api/columns - Add new column
PATCH /api/columns/:id - Update column title or order
POST /api/cards - Add new card
PATCH /api/cards/:id - Update card content or order
ðŸ“Œ AI Coding Agent Guidelines
- Use Tailwind for layout styling.
- Use React Server Components (if App Router), otherwise traditional client-side components.
- Use @dnd-kit/sortable for drag-and-drop of cards.
- Implement optimistic UI updates where practical.
- Keep code modular (separate components per feature).
- All DB access should go through Prisma ORM.
- Prioritize clear naming and readability over short syntax.
- Return updated order values for drag-drop items.
ðŸ”œ Nice-to-Have (Not in MVP)
â€¢ User login (via NextAuth.js)
â€¢ Real-time sync (via WebSocket)
â€¢ Card comments
â€¢ Card detail modal
â€¢ Due dates / labels